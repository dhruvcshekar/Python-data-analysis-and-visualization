# -*- coding: utf-8 -*-
"""basic stock analytics using data scraping, cleaning, and visualization techniques

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lYJ0FXbiMYy6bt-RqOzVIgnKVf2avRK9
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import numpy as np

"""Load the dataset from the CSV file."""

try:
    df = pd.read_csv('stock_data_july_2025.csv')
    print("Data loaded successfully!")
except FileNotFoundError:
    print("Error: 'stock_data_july_2025.csv' not found. Please upload the file to your Colab environment.")
    # Exit the script if the file isn't found
    exit()

"""Step 2: Data Preprocessing and Feature Engineering
(this program doesnt use or need these parameters)
"""

df.columns = df.columns.str.strip()

columns_to_drop = ['Date', 'Ticker', '52 Week High', '52 Week Low', 'Volume Traded', 'EPS', 'Sector']

existing_columns_to_drop = [col for col in columns_to_drop if col in df.columns]

if existing_columns_to_drop:
    df = df.drop(columns=existing_columns_to_drop)
    print(f"Dropped columns: {existing_columns_to_drop}")
else:
    print("No columns from the predefined list were found to be dropped.")

X = df.drop(columns=['PE Ratio', 'Dividend Yield'])
y = df['PE Ratio']

print("\nProcessed Features (X):")
print(X.head().to_markdown(index=False, numalign="left", stralign="left"))

"""Step 3: Split Data and Train the Model"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the RandomForestRegressor model.
model = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)

print("\nTraining the model...")
model.fit(X_train, y_train)
print("Model training complete!")

"""Step 4: Make Predictions and Evaluate the Model"""

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation Metrics:")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R^2): {r2:.2f}")

print("\nPerforming 5-fold cross-validation...")
cv_scores = cross_val_score(model, X, y, cv=5, scoring='r2')
print(f"Cross-validation R-squared scores: {cv_scores}")
print(f"Average Cross-validation R-squared: {cv_scores.mean():.2f} +/- {cv_scores.std():.2f}")

max_val = max(max(y_test), max(y_pred))
plt.plot([0, max_val], [0, max_val], 'r--')
plt.grid(True)
plt.show()

feature_importances = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)
print("\nTop 10 Feature Importances:")
print(feature_importances.head(10).to_markdown(numalign="left", stralign="left"))